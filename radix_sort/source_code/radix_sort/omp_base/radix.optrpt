Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] radix.cpp(145,1)
  -> INLINE: (153,24) CycleTimer::currentSeconds()
    -> INLINE: CycleTimer.h:(71,45) CycleTimer::currentTicks()
    -> INLINE: CycleTimer.h:(71,62) CycleTimer::secondsPerTick()
      -> INLINE: (130,17) strstr(char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (132,33) strstr(char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (136,37) strstr(char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (137,37) strstr(char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (154,5) radixsort(int *, int)
  -> INLINE: (155,22) CycleTimer::currentSeconds()
    -> INLINE: CycleTimer.h:(71,45) CycleTimer::currentTicks()
    -> INLINE: CycleTimer.h:(71,62) CycleTimer::secondsPerTick()
      -> INLINE: (130,17) strstr(char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (132,33) strstr(char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (136,37) strstr(char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (137,37) strstr(char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (157,14) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (157,25) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double)
  -> (157,37) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> (169,18) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (173,18) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at radix.cpp(148,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at CycleTimer.h(125,9) inlined into radix.cpp(153,24)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at CycleTimer.h(125,9) inlined into radix.cpp(155,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at radix.cpp(159,5)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ radix.cpp(161,9) ]
LOOP END

    Report from: Code generation optimizations [cg]

radix.cpp(145,1):remark #34051: REGISTER ALLOCATION : [main] radix.cpp:145

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rbx rsi rdi r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     240
            Global    :      69
            Local     :     171
        Regenerable   :     107
        Spilled       :       9
        
    Routine stack
        Variables     :   402068 bytes*
            Reads     :       9 [4.50e+04 ~ 3.0%]
            Writes    :       6 [4.00e+05 ~ 26.4%]
        Spills        :      32 bytes*
            Reads     :      12 [2.75e+00 ~ 0.0%]
            Writes    :       6 [2.75e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: radixsort(int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (radixsort(int *, int)) [2] radix.cpp(56,1)
  -> INLINE: (90,22) radixsortkernel(int *, int *, int, int)
  -> INLINE: (95,23) prefix_sum(int *, int)


    Report from: OpenMP optimizations [openmp]

radix.cpp(92:1-92:1):OMP:_Z9radixsortPii:  OpenMP multithreaded code generation for BARRIER was successful
radix.cpp(97:1-97:1):OMP:_Z9radixsortPii:  OpenMP multithreaded code generation for BARRIER was successful
radix.cpp(70:1-70:1):OMP:_Z9radixsortPii:  OpenMP DEFINED LOOP WAS PARALLELIZED
radix.cpp(93:1-93:1):OMP:_Z9radixsortPii:  OpenMP multithreaded code generation for SINGLE was successful
radix.cpp(80:1-80:1):OMP:_Z9radixsortPii:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at radix.cpp(66,5)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at radix.cpp(66,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at radix.cpp(66,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at radix.cpp(66,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at radix.cpp(77,5)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at radix.cpp(70,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at radix.cpp(70,1)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ radix.cpp(73,9) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at radix.cpp(70,1)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at radix.cpp(40,5) inlined into radix.cpp(90,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bin[0] (43:13) and bin[0] (43:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at radix.cpp(40,5) inlined into radix.cpp(90,22)
<Remainder>
LOOP END

LOOP BEGIN at radix.cpp(49,5) inlined into radix.cpp(90,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bin[(*(arr+i*4))&1] (50:16) and bin[(*(arr+i*4))&1] (50:16)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at radix.cpp(49,5) inlined into radix.cpp(90,22)
<Remainder>
LOOP END

LOOP BEGIN at radix.cpp(21,5) inlined into radix.cpp(95,23)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between arr[i] (23:9) and arr[i-1] (23:9)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at radix.cpp(21,5) inlined into radix.cpp(95,23)
<Remainder>
LOOP END

LOOP BEGIN at radix.cpp(27,5) inlined into radix.cpp(95,23)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at radix.cpp(27,5) inlined into radix.cpp(95,23)
<Remainder>
LOOP END

LOOP BEGIN at radix.cpp(99,13)
<Predicate Optimized v1>
   remark #25423: Condition at line 101 hoisted out of this loop
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at radix.cpp(99,13)
<Remainder loop for vectorization, Predicate Optimized v1>
LOOP END

LOOP BEGIN at radix.cpp(99,13)
<Peeled loop for vectorization, Predicate Optimized v2>
LOOP END

LOOP BEGIN at radix.cpp(99,13)
<Predicate Optimized v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at radix.cpp(99,13)
<Alternate Alignment Vectorized Loop, Predicate Optimized v2>
LOOP END

LOOP BEGIN at radix.cpp(99,13)
<Remainder loop for vectorization, Predicate Optimized v2>
LOOP END

    Report from: Code generation optimizations [cg]

radix.cpp(68,9):remark #34026: call to memset implemented as a call to optimized library version
radix.cpp(56,1):remark #34051: REGISTER ALLOCATION : [_Z9radixsortPii] radix.cpp:56

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     467
            Global    :     124
            Local     :     343
        Regenerable   :     103
        Spilled       :      11
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :      17 [4.59e+01 ~ 1.3%]
            Writes    :      23 [7.95e+01 ~ 2.2%]
        Spills        :     128 bytes*
            Reads     :      45 [1.09e+02 ~ 3.1%]
            Writes    :      35 [4.86e+01 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: printarray(int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (printarray(int *, int)) [6] radix.cpp(13,1)
  -> (15,26) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (16,14) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at radix.cpp(14,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

radix.cpp(13,1):remark #34051: REGISTER ALLOCATION : [_Z10printarrayPii] radix.cpp:13

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rsi rdi r12-r14]
        
    Routine temporaries
        Total         :      24
            Global    :      13
            Local     :      11
        Regenerable   :       7
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 3.4%]
            Writes    :       3 [2.70e+00 ~ 3.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/opt/apps/gcc/4.9.3/include/c++/4.9.3/bits/char_traits.h(263,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /opt/apps/gcc/4.9.3/include/c++/4.9.3/bits/char_traits.h:263

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: prefix_sum(int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (prefix_sum(int *, int)) [10] radix.cpp(20,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at radix.cpp(21,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between arr[i] (23:9) and arr[i-1] (23:9)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at radix.cpp(21,5)
<Remainder>
LOOP END

LOOP BEGIN at radix.cpp(27,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at radix.cpp(27,5)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

radix.cpp(20,1):remark #34051: REGISTER ALLOCATION : [_Z10prefix_sumPii] radix.cpp:20

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbp rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      41
            Global    :      20
            Local     :      21
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [9.79e-01 ~ 0.8%]
            Writes    :       1 [9.79e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: radixsortkernel(int *, int *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (radixsortkernel(int *, int *, int, int)) [11] radix.cpp(36,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at radix.cpp(40,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bin[0] (43:13) and bin[0] (43:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at radix.cpp(40,5)
<Remainder>
LOOP END

LOOP BEGIN at radix.cpp(49,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between arr[i] (50:42) and temp[:] (50:9)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at radix.cpp(49,5)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

radix.cpp(36,1):remark #34051: REGISTER ALLOCATION : [_Z15radixsortkernelPiS_ii] radix.cpp:36

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r11 r14-r15]
        
    Routine temporaries
        Total         :      80
            Global    :      21
            Local     :      59
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       3 [6.42e+00 ~ 3.2%]
            Writes    :       8 [8.92e+00 ~ 4.5%]
        Spills        :      16 bytes*
            Reads     :       2 [1.96e+00 ~ 1.0%]
            Writes    :       2 [1.96e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: radixsort_CPU(int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (radixsort_CPU(int *, int)) [12] radix.cpp(116,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at radix.cpp(121,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at radix.cpp(121,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at radix.cpp(121,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at radix.cpp(127,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at radix.cpp(130,9)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at radix.cpp(130,9)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at radix.cpp(130,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at radix.cpp(132,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between bin[:] (132:33) and bin[:] (132:33)
   LOOP END

   LOOP BEGIN at radix.cpp(134,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between bin[i] (134:33) and bin[i-1] (134:33)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at radix.cpp(134,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at radix.cpp(136,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between bin[:] (136:47) and bin[:] (136:47)
   LOOP END

   LOOP BEGIN at radix.cpp(138,9)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at radix.cpp(138,9)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at radix.cpp(138,9)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at radix.cpp(138,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

radix.cpp(130,33):remark #34026: call to memset implemented as a call to optimized library version
radix.cpp(138,33):remark #34026: call to memcpy implemented as a call to optimized library version
radix.cpp(116,1):remark #34051: REGISTER ALLOCATION : [_Z13radixsort_CPUPii] radix.cpp:116

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     133
            Global    :      40
            Local     :      93
        Regenerable   :       6
        Spilled       :      13
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      25 [5.53e+01 ~ 2.0%]
            Writes    :      12 [1.28e+01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CycleTimer::currentTicks()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (CycleTimer::currentTicks()) CycleTimer.h(45,5)

===========================================================================

Begin optimization report for: CycleTimer::currentSeconds()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (CycleTimer::currentSeconds()) CycleTimer.h(71,36)

===========================================================================

Begin optimization report for: CycleTimer::secondsPerTick()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (CycleTimer::secondsPerTick()) CycleTimer.h(89,5)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [23] <compiler generated>


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
